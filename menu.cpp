//=============================================================================
// *** Arduino Pong ***
// Copyright (c) Robert Grasböck, All rights reserved.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library.
//=============================================================================
/// @file   menu.cpp
/// @author Robert Grasböck (robert.grasboeck@gmail.com)
/// @date   November, 2015
/// @brief  Game Menu State
//=============================================================================
#include <Arduino.h>

#include "tv.h"   // tv out instance and includes
#include "pong.h"
#include "play.h" // next state
#include "rtttl.h"

#include "menu.h"

/// PONG LOGO
PROGMEM const unsigned char pong_logo_bits[] = {
  96, 48,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x3c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7f, 0xfc, 0x0, 0x3, 0xff, 0xc0,
  0x0, 0x3f, 0xc0, 0x0, 0x3f, 0xfe, 0xff, 0xff, 0x0, 0xf, 0xff, 0xe0, 0x0, 0xff, 0xe0,
  0x0, 0xff, 0xfe, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xf8, 0x1, 0xff, 0xf8, 0x1, 0xff, 0xfe,
  0xff, 0xff, 0xc0, 0x7f, 0xff, 0xfc, 0x3, 0xff, 0xfc, 0x7, 0xff, 0xfe, 0xff, 0xff, 0xe0,
  0xff, 0xff, 0xfe, 0x7, 0xff, 0xfe, 0x7, 0xff, 0xfe, 0xfc, 0x3f, 0xf1, 0xff, 0x83, 0xff,
  0xf, 0xff, 0xfe, 0xf, 0xff, 0xfe, 0xfc, 0x7, 0xf1, 0xfe, 0x0, 0xff, 0xf, 0xe0, 0xff,
  0x1f, 0xf0, 0x0, 0xfc, 0x3, 0xf3, 0xfc, 0x0, 0x3f, 0x9f, 0xc0, 0x3f, 0x3f, 0xc0, 0x0,
  0xfc, 0x1, 0xf3, 0xf8, 0x0, 0x3f, 0x9f, 0x80, 0x3f, 0x3f, 0x80, 0x0, 0xfc, 0x1, 0xff,
  0xf0, 0x0, 0x1f, 0xdf, 0x80, 0x1f, 0xbf, 0x0, 0x0, 0xfc, 0x1, 0xff, 0xe0, 0x0, 0xf,
  0xdf, 0x0, 0x1f, 0xff, 0x0, 0x0, 0xfc, 0x1, 0xff, 0xe0, 0x0, 0xf, 0xdf, 0x0, 0x1f,
  0xfe, 0x0, 0x0, 0xfc, 0x1, 0xff, 0xe0, 0x0, 0xf, 0xff, 0x0, 0x1f, 0xfe, 0x7, 0xfc,
  0xfc, 0x3, 0xff, 0xc0, 0x0, 0x7, 0xff, 0x0, 0x1f, 0xfe, 0x7, 0xfe, 0xfc, 0x3, 0xff,
  0xc0, 0x0, 0x7, 0xff, 0x0, 0x1f, 0xfe, 0x7, 0xfe, 0xfc, 0xf, 0xff, 0xc0, 0x0, 0x7,
  0xff, 0x0, 0x1f, 0xfe, 0x7, 0xfe, 0xff, 0xff, 0xef, 0xe0, 0x0, 0xf, 0xff, 0x0, 0x1f,
  0xfe, 0x7, 0xfe, 0xff, 0xff, 0xe7, 0xe0, 0x0, 0xf, 0xff, 0x0, 0x1f, 0xfe, 0x7, 0xfe,
  0xff, 0xff, 0xc7, 0xe0, 0x0, 0xf, 0xdf, 0x0, 0x1f, 0xfe, 0x0, 0x7e, 0xff, 0xff, 0x87,
  0xf0, 0x0, 0x1f, 0xdf, 0x0, 0x1f, 0xff, 0x0, 0x7e, 0xff, 0xfe, 0x3, 0xf0, 0x0, 0x1f,
  0xdf, 0x0, 0x1f, 0xbf, 0x0, 0x7e, 0xff, 0xf8, 0x3, 0xf8, 0x0, 0x3f, 0x9f, 0x0, 0x1f,
  0xbf, 0x80, 0x7e, 0xfc, 0x0, 0x1, 0xfe, 0x0, 0x7f, 0x9f, 0x0, 0x1f, 0xbf, 0xc0, 0x7e,
  0xfc, 0x0, 0x1, 0xff, 0x81, 0xff, 0x1f, 0x0, 0x1f, 0x9f, 0xf0, 0x7e, 0xfc, 0x0, 0x0,
  0xff, 0xff, 0xfe, 0x1f, 0x0, 0x1f, 0x8f, 0xff, 0xfe, 0xfc, 0x0, 0x0, 0x7f, 0xff, 0xfc,
  0x1f, 0x0, 0x1f, 0x87, 0xff, 0xfe, 0xfc, 0x0, 0x0, 0x3f, 0xff, 0xf8, 0x1f, 0x0, 0x1f,
  0x83, 0xff, 0xfe, 0xfc, 0x0, 0x0, 0x1f, 0xff, 0xf0, 0x1f, 0x0, 0x1f, 0x81, 0xff, 0xfe,
  0xfc, 0x0, 0x0, 0x7, 0xff, 0xc0, 0x1f, 0x0, 0x1f, 0x80, 0x7f, 0xfe, 0x0, 0x0, 0x0,
  0x0, 0xfe, 0x0, 0x1f, 0x0, 0x1f, 0x80, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x3, 0xb6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2a,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2a, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x22, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x78, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0xfb, 0xe7, 0xc6, 0x67, 0xcd, 0xbe, 0x33, 0x3e, 0x3b, 0x9e, 0x7e, 0xc6, 0xc7, 0x76, 0x66,
  0x6e, 0xed, 0xb3, 0x33, 0x77, 0x7b, 0xd8, 0x18, 0xc6, 0xf6, 0x36, 0x67, 0xec, 0x6d, 0xb3,
  0x33, 0x63, 0x6a, 0xd8, 0x18, 0xc6, 0xf6, 0x36, 0xc7, 0xec, 0x6d, 0xb6, 0x3f, 0x63, 0x6a,
  0xde, 0x18, 0xc6, 0xc6, 0x37, 0x80, 0x6c, 0x6d, 0xbc, 0x33, 0x63, 0x6a, 0xd8, 0x18, 0x6c,
  0xc7, 0x77, 0xc0, 0x6e, 0xed, 0xbe, 0x33, 0x77, 0x6e, 0xd8, 0x18, 0x6c, 0xc3, 0xe6, 0xe7,
  0xc7, 0xc7, 0x37, 0x33, 0x3e, 0xee, 0xfe, 0x18, 0x38, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
};

// const char song[] PROGMEM = "MissionImp:d=16,o=6,b=95:32d,32d#,32d,32d#,32d,32d#,32d,32d#,32d,32d,32d#,32e,32f,32f#,32g,g,8p,g,8p,a#,p,c7,p,g,8p,g,8p,f,p,f#,p,g,8p,g,8p,a#,p,c7,p,g,8p,g,8p,f,p,f#,p,a#,g,2d,32p,a#,g,2c#,32p,a#,g,2c,a#5,8c,2p,32p,a#5,g5,2f#,32p,a#5,g5,2f,32p,a#5,g5,2e,d#,8d";
// const char *song = "MI:d=16,o=6,b=95:32d,32d#";
// const char song[] PROGMEM = "Entertainer:d=4,o=5,b=140:8d,8d#,8e,c6,8e,c6,8e,2c.6,8c6,8d6,8d#6,8e6,8c6,8d6,e6,8b,d6,2c6,p,8d,8d#,8e,c6,8e,c6,8e,2c.6,8p,8a,8g,8f#,8a,8c6,e6,8d6,8c6,8a,2d6";

const char song[] PROGMEM =
//"we-rock:d=4,o=6,b=31:16c#.6,32g#5,32e.5,16g#5,8c#.5,16c#.6,32g#5,32e.5,16g#5,8c#.5,16b.5,32a#5,32g#.5,16a#5,8d#.5,16c#.6,32g#5,32e.5,16g#5,8c#.5,16c#.6,32g#5,32e.5,16g#5,8c#.5,16b.5,32a#5,32g#.5,16a#5,8d#.5,32a#.5,32g#5,32f#.5,8c#5,32a#.5,32g#5,32f#.5,8c#5,16c#.6,32g#5,32e.5,16g#5,8c#.5,16c#.6,32g#5,32e.5,16g#5,8c#.5,16b.5,32a#5,32g#.5,16a#5,8d#.5,32a#.5,32g#5,32f#.5,8c#5,32a#.5,32g#5,32f#.5,8c#5,16c#.6,32g#5,32e.5,16g#5,8c#.5,16c#.6,32g#5,32e.5,16g#5,8c#.5,16b.5,32a#5,32g#.5,16a#5,8d#.5,32a#.5,32g#5,32f#.5,8c#5,32a#.5,32g#5,32f#.5,8c#.5,16c#.6,32g#5,32e.5,16g#5,8c#.5,16c#.6,32g#5,32e.5,16g#5,8c#.5,16b.5,32a#5,32g#.5,16a#5,8d#.5,32a#.5,32g#5,32f#.5,8c#5,32a#.5,32g#5,32f#.5,8c#5,16c#.6,32g#5,32e.5,16g#5,8c#.5,16c#.6,32g#5,32e.5,16g#5,8c#.5,16b.5,32a#5,32g#.5,16a#5,8d#.5,32a#.5,32g#5,32f#.5,8c#5,32a#.5,32g#5,32f#.5,8c#5,16c#.6,32g#5,32e.5,16g#5,8c#.5,16c#.6,32g#5,32e.5,16g#5,8c#.5,16b.5,32a#5,32g#.5,16a#5,8d#.5,32a#.5,32g#5,32f#.5,8c#5,32a#.5,32g#5,32f#.5,8c#5";

// "we-rock:d=4,o=6,b=112:32a#.6,32f.6,16c.6,32a#.6,32f.6,16c.6,32a#.6,32f.6,16c.6,32a#.6,32f.6,16c.6,1g6,32a#.6,32f.6,16c.6,32a#.6,32f.6,16c.6,32a#.6,32f.6,16c.6,32a#.6,32f.6,16c.6,1g6,32a#.6,32f.6,16d.6,32a#.6,32f.6,16d.6,32a#.6,32f.6,16d.6,32a#.6,32f.6,16d.6,1g6,32a#.6,32f.6,16d.6,32a#.6,32f.6,16d.6,32a#.6,32f.6,16d.6,32a#.6,32f.6,16d.6,1g6,32f.6,32d.6,16a#.5,32f.6,32d.6,16a#.5,32f.6,32d.6,16a#.5,32f.6,32d.6,16a#.5,1g6,32f.6,32d.6,16a#.5,32f.6,32d.6,16a#.5,32f.6,32d.6,16a#.5,32f.6,32d.6,16a#.5,1g6,32f.6,32d#.6,16c.6,32f.6,32d#.6,16c.6,32f.6,32d#.6,16c.6,32f.6,32d#.6,16c.6,1g6,32f.6,32d#.6,16c.6,32f.6,32d#.6,16c.6,32f.6,32d#.6,16c.6,32f.6,32d#.6,16c.6,32g.6";
  "we-rock:d=4,o=6,b=40:32d#5,32e5,32f5,16c#6,32f5,16c#6,32f5,8c#6,32c#6,32d#6,32e6,32f6,32c#6,32d#6,16f6,32c6,16d#6,8c#.6,32d#5,32e5,32f5,16c#6,32f5,16c#6,32f5,8c#6,32a#5,32g#5,32g5,32e5,32c#6,16f6,32d#6,32c#6,32a#5,4d#6";

RTTTL rtttl;

void Menu::init() {
  startmode = 0;

  TV.clear_screen();

  // Border
  TV.draw_rect(0, 0, TV.hres() - 1, TV.vres() - 1, 1);
  TV.draw_rect(1, 1, TV.hres() - 3, TV.vres() - 3, 1);

  // Loog
  TV.bitmap((TV.hres() - pong_logo_bits[0]) / 2,
            (TV.vres() - pong_logo_bits[1]) / 2,
            pong_logo_bits);

  // ball1.update();
  // ball2.update();
  TV.select_font(font4x6);

  rtttl.init(song);
}

void Menu::loop() {
  if (pong.ButtonPressed() == true) {
    pong.setPlayMode(startmode);
    pong.setCurrentState(1);
  }

  rtttl.loop();

  uint16_t pos = pong.PaddlePos(0);

  if (pos < 720)
    startmode = 1;
  else
    if (pos > 763)
      startmode = 0;

  // clear menue
  int stop_line = (int)(display.start_render + (display.vres * (display.vscale_const + 1))) + 1;

  if (display.scanLine == stop_line) {
    // text
    TV.print(10, TV.vres() - 15, "Computer Human");
    // border
    TV.draw_rect(7, TV.vres() - 18, 14 * 4 + 4, 10, startmode ? 1 : 0);

    // text
    TV.print(TV.hres() - 10 - 8 * 4, TV.vres() - 15, "2 Player");
    // border
    TV.draw_rect(TV.hres() - 13 - 8 * 4, TV.vres() - 18, 8 * 4 + 4, 10, startmode ? 0 : 1);
  }
}
